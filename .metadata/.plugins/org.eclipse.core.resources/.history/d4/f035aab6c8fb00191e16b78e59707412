package utils.Base;

import java.io.IOException;
import java.util.HashMap;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utils.Common.CommonUtils;
import utils.dataSource.ExcelLib;
import utils.dataSource.LoadProperty;

public class BaseClass {
	public static RequestSpecification httpReq;
	public static Response resp;
	public static ExcelLib exl = new ExcelLib();
	
	public void createrequest(String req) throws EncryptedDocumentException, InvalidFormatException, IOException {
		RestAssured.baseURI= LoadProperty.getvar("BaseUrl", "config");
		httpReq = RestAssured.given();
		if(req.equalsIgnoreCase("getalllists")) {
			httpReq= CommonUtils.addHeader(httpReq);
			httpReq.log().all();
		}
		else if (req.equalsIgnoreCase("getSpecificList")) {
			CommonUtils.addPathVariable("id", exl.exceldata("Lists", 1, 0),httpReq);
			
			httpReq = CommonUtils.addHeader(httpReq);
		}
		else if (req.equalsIgnoreCase("createList"))
		{	
			httpReq = CommonUtils.addHeader(httpReq);
			httpReq.body(createBody(req));
		}
		else if (req.equalsIgnoreCase("updatepatchList"))
		{	
			httpReq = CommonUtils.addHeader(httpReq);
			httpReq = CommonUtils.addPathVariable("id", exl.exceldata("Lists", 1, 0),httpReq);
			httpReq.body(createBody(req));
		}
		else if (req.equalsIgnoreCase("updateputList"))
		{	
			httpReq = CommonUtils.addHeader(httpReq);
			httpReq = CommonUtils.addPathVariable("id", exl.exceldata("Lists", 1, 0),httpReq);
			httpReq.body(createBody(req));
		}
		else if (req.equalsIgnoreCase("deleteList"))
		{	
			httpReq = CommonUtils.addHeader(httpReq);
			httpReq = CommonUtils.addPathVariable("id", exl.exceldata("Lists", 1, 0),httpReq);
			httpReq = CommonUtils.addqueryParam("revision", exl.exceldata("Lists", 1, 2), httpReq);;
		}
		else if (req.equalsIgnoreCase("gettasks")) {
			CommonUtils.addqueryParam("list_id", exl.exceldata("Lists", 1, 5),httpReq);
			httpReq = CommonUtils.addHeader(httpReq);
		}
		else if (req.equalsIgnoreCase("createtasks")) {
			httpReq = CommonUtils.addHeader(httpReq);
		}
		else if (req.equalsIgnoreCase("updateputtasks")) {
			CommonUtils.addPathVariable("id", exl.exceldata("Lists", 1, 0),httpReq);
			
			httpReq = CommonUtils.addHeader(httpReq);
		}
		else if (req.equalsIgnoreCase("updatepatchtasks")) {
			CommonUtils.addPathVariable("id", exl.exceldata("Lists", 1, 0),httpReq);
			
			httpReq = CommonUtils.addHeader(httpReq);
		}
		else if (req.equalsIgnoreCase("deletetasks")) {
			CommonUtils.addPathVariable("id", exl.exceldata("Lists", 1, 0),httpReq);
			
			httpReq = CommonUtils.addHeader(httpReq);
		}
		else {
			System.out.println("Unspecified REquest");
		}
			
	}
	public HashMap<String,Object> createBody(String req) throws EncryptedDocumentException, InvalidFormatException, IOException{
		HashMap<String, Object> body = new HashMap<String, Object>();
		if(req.equalsIgnoreCase("createList")) {
			body.put("title",exl.exceldata("Lists", 1, 4));
			return body;
		}
		else if(req.equalsIgnoreCase("updatepatchList")) {
			body.put("revision",CommonUtils.intparser( exl.exceldata("Lists", 1, 2)));
			body.put("updateTitle",exl.exceldata("Lists", 1,3 ));
			return body;
		}else if(req.equalsIgnoreCase("updateputList")) {
			body.put("revision",CommonUtils.intparser( exl.exceldata("Lists", 1, 2)));
			body.put("updateTitle",exl.exceldata("Lists", 1, 4));
			return body;
		}
		else if(req.equalsIgnoreCase("createtasks")) {
			body.put("list_id",CommonUtils.intparser( exl.exceldata("Lists", 1, 5)));
			body.put("updateTitle",exl.exceldata("Lists", 1, 4));
			return body;
		}
		else {
			System.out.println("wrong logic");
			return body;
		}
		
	}

	public Response createresponse(String req) {
		if(req.equalsIgnoreCase("getalllists")) {
			resp = httpReq.when().get(LoadProperty.getvar("Get-lists", "resource"));
			resp.then().log().all();
			return resp;
		}
		else if(req.equalsIgnoreCase("getSpecificList")) {
			resp = httpReq.when().get(LoadProperty.getvar("Get-lists_with_id", "resource"));
			resp.then().log().all();
			return resp;
		}
		else if(req.equalsIgnoreCase("createList")) {
			resp = httpReq.when().post(LoadProperty.getvar("Get-lists", "resource"));
			resp.then().log().all();
			return resp;
		}else if(req.equalsIgnoreCase("updatepatchList")) {
			resp = httpReq.when().patch(LoadProperty.getvar("Get-lists_with_id", "resource"));
			resp.then().log().all();
			return resp;
		}else if(req.equalsIgnoreCase("updateputList")) {
			resp = httpReq.when().put(LoadProperty.getvar("Get-lists_with_id", "resource"));
			resp.then().log().all();
			return resp;
		}
		else if(req.equalsIgnoreCase("deleteList")) {
			resp = httpReq.when().delete(LoadProperty.getvar("Get-lists_with_id", "resource"));
			resp.then().log().all();
			return resp;
		}
		else {
			System.out.println("Wrong Param");
			return null;
		}
	}
}


